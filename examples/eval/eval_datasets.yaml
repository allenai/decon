# Configuration for downloading and transforming eval datasets
# Global settings
output_dir: "/home/robert/Downloads/reference"
jsonl_format:
  text_field: "text"
  eval_field: "eval_name" 
  index_field: "index"
  split_field: "split"

# Dataset specifications
evals:
  aimo_validation:
    hf_path: "AI-MO/aimo-validation-aime"
    splits: ["train"]
    transform:
      text_field: "problem"

  ai2_arc_challenge:
    hf_path: "allenai/ai2_arc"
    hf_config: "ARC-Challenge"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "question"

  ai2_arc_easy:
    hf_path: "allenai/ai2_arc"
    hf_config: "ARC-Easy"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "question"

  popqa:
    hf_path: "akariasai/PopQA"
    splits: ["test"]
    transform:
      text_field: "question"

  basic_skills_arithmetic:
    hf_path: "allenai/basic-skills"
    hf_config: "arithmetic"
    splits: ["validation"]
    transform:
      text_field: "question"

  basic_skills_coding:
    hf_path: "allenai/basic-skills"
    hf_config: "coding"
    splits: ["validation"]
    transform:
      text_field: "question"

  coqa_mc:
    hf_path: "allenai/coqa_mc"
    splits: ["validation"]
    transform:
      text_field: "query_original"

  drop_mc:
    hf_path: "allenai/drop_mc"
    splits: ["validation"]
    transform:
      text_field: "question_original"

  jeopardy_mc:
    hf_path: "allenai/jeopardy_mc"
    splits: ["test"]
    transform:
      text_field: "context_original"

  multilingual_mbpp_python:
    hf_path: "allenai/multilingual_mbpp"
    hf_config: "python"
    splits: ["test", "train", "validation"]
    transform:
      text_field: "text"

  nq_open_mc:
    hf_path: "allenai/nq_open_mc"
    splits: ["validation"]
    transform:
      text_field: "question"

  qasper_yesno:
    hf_path: "allenai/qasper-yesno"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "question"

  sciriff_yesno:
    hf_path: "allenai/sciriff-yesno"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "question"

  simple_tom_mental_state:
    hf_path: "allenai/SimpleToM"
    hf_config: "mental-state-qa"
    splits: ["test"]
    transform:
      text_field: "question"

  squad_mc:
    hf_path: "allenai/squad_mc"
    splits: ["validation"]
    transform:
      text_field: "question_original"

  zebra_logic_grid:
    hf_path: "allenai/ZebraLogicBench-private"
    hf_config: "grid_mode"
    splits: ["test"]
    transform:
      text_field: "puzzle"

  gsm_symbolic:
    hf_path: "apple/GSM-Symbolic"
    splits: ["test"]
    transform:
      text_field: "question"

  bigcodebench:
    hf_path: "bigcode/bigcodebench"
    splits: ["v0.1.4"]
    transform:
      text_field: "complete_prompt"

  bigcodebench_hard:
    hf_path: "bigcode/bigcodebench-hard"
    splits: ["v0.1.4"]
    transform:
      text_field: "complete_prompt"

  cosmos_qa:
    hf_path: "allenai/cosmos_qa"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "question"

  cruxeval:
    hf_path: "cruxeval-org/cruxeval"
    splits: ["test"]
    transform:
      text_field: "code"

  deepseek_leetcode:
    hf_path: "davidheineman/deepseek-leetcode"
    splits: ["test"]
    transform:
      text_field: "prompt"

  medqa_en:
    hf_path: "davidheineman/medqa-en"
    splits: ["train", "test", "dev"]
    transform:
      text_field: "question"

  coqa:
    hf_path: "EleutherAI/coqa"
    splits: ["train", "validation"]
    transform:
      text_field: "story"

  drop:
    hf_path: "EleutherAI/drop"
    splits: ["train", "validation"]
    transform:
      text_field: "question"

  hendrycks_math_algebra:
    hf_path: "EleutherAI/hendrycks_math"
    hf_config: "algebra"
    splits: ["train", "test"]
    transform:
      text_field: "problem"

  lambada_openai:
    hf_path: "EleutherAI/lambada_openai"
    splits: ["test"]
    transform:
      text_field: "text"

  humaneval_plus:
    hf_path: "evalplus/humanevalplus"
    splits: ["test"]
    transform:
      text_field: "prompt"

  mbpp_plus:
    hf_path: "evalplus/mbppplus"
    splits: ["test"]
    transform:
      text_field: "prompt"

  mbpp:
    hf_path: "google-research-datasets/mbpp"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "text"

  nq_open:
    hf_path: "google-research-datasets/nq_open"
    splits: ["train", "validation"]
    transform:
      text_field: "question"

  tydiqa_primary:
    hf_path: "google-research-datasets/tydiqa"
    hf_config: "primary_task"
    splits: ["train", "validation"]
    transform:
      text_field: "question_text"

  ifeval:
    hf_path: "HuggingFaceH4/ifeval"
    splits: ["train"]
    transform:
      text_field: "prompt"

  math_500:
    hf_path: "HuggingFaceH4/MATH-500"
    splits: ["test"]
    transform:
      text_field: "problem"

  lexam_mcq:
    hf_path: "LEXam-Benchmark/LEXam"
    hf_config: "mcq_4_choices"
    splits: ["test"]
    transform:
      text_field: "question"

  simple_qa:
    hf_path: "lighteval/SimpleQA"
    splits: ["test"]
    transform:
      text_field: "problem"

  livecodebench:
    hf_path: "livecodebench/code_generation_lite"
    splits: ["test"]
    transform:
      text_field: "question_content"

  humaneval_infilling:
    hf_path: "loubnabnl/humaneval_infilling"
    splits: ["test"]
    transform:
      text_field: "prompt"

  logiqa:
    hf_path: "lucasmccabe/logiqa"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "query"

  bbh_boolean_expressions:
    hf_path: "lukaemon/bbh"
    hf_config: "boolean_expressions"
    splits: ["test"]
    transform:
      text_field: "input"

  trivia_qa:
    hf_path: "mandarjoshi/trivia_qa"
    hf_config: "rc"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "question"

  multipl_e_humaneval_python:
    hf_path: "nuprl/MultiPL-E"
    hf_config: "humaneval-js"  # Using JavaScript as example
    splits: ["test"]
    transform:
      text_field: "prompt"

  mrcr:
    hf_path: "openai/mrcr"
    splits: ["train"]
    transform:
      text_field: "prompt"

  openbookqa:
    hf_path: "allenai/openbookqa"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "question_stem"

  medmcqa:
    hf_path: "openlifescienceai/medmcqa"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "question"

  gsm_plus:
    hf_path: "qintongli/GSM-Plus"
    splits: ["test"]
    transform:
      text_field: "question"

  squad:
    hf_path: "rajpurkar/squad"
    splits: ["train", "validation"]
    transform:
      text_field: "question"

  squad_v2:
    hf_path: "rajpurkar/squad_v2"
    splits: ["train", "validation"]
    transform:
      text_field: "question"

  copycolors_mcqa:
    hf_path: "sarahwie/copycolors_mcqa"
    hf_config: "4_answer_choices"
    splits: ["validation", "test"]
    transform:
      text_field: "question"

  sciq:
    hf_path: "allenai/sciq"
    splits: ["train", "validation", "test"]
    transform:
      text_field: "question"

  social_i_qa:
    hf_path: "allenai/social_i_qa"
    splits: ["train", "validation"]
    transform:
      text_field: "question"

  jeopardy:
    hf_path: "soldni/jeopardy"
    hf_config: "all_questions"
    splits: ["train"]
    transform:
      text_field: "question"

  zero_scrolls_qasper:
    hf_path: "tau/zero_scrolls"
    hf_config: "qasper"
    splits: ["validation", "test"]
    transform:
      text_field: "input"

  mt_eval_refinement:
    hf_path: "wckwan/MT-Eval"
    hf_config: "refinement_single"
    splits: ["test"]
    transform:
      text_field: "conv"

  winogrande:
    hf_path: "allenai/winogrande"
    hf_config: "winogrande_l"
    splits: ["train", "test", "validation"]
    transform:
      text_field: "sentence"

  ds_1000:
    hf_path: "xlangai/DS-1000"
    splits: ["test"]
    transform:
      text_field: "prompt"